Control signals :
---------
stage 1
---------
IR_LATCH_EN 
NPC_LATCH_EN 
---------
stage 2
---------
RF_RD1_EN
RF_RD2_EN
DEC_OUTREG_EN
IS_I_TYPE
---------
stage 3  
---------
MUXA_SEL 
MUXB_SEL 
EXE_OUTREG_EN instead of ALU_OUTREG_EN
FLAGS_RST
EQ_COND 
JUMP_EN 
--------
stage 4
--------
DRAM_WE 
MEM_OUTREG_EN
PC_LATCH_EN 
--------
stage 5
-------
WB_MUX_SEL 
JAL_MUX_SEL
RF_WR_EN 
-------

Instructions [27 for the basic one] :

-------------------------------------------------------------------
nop [Idles one cycle]                       |   000000000000000        -- 
-------------------------------------------------------------------
j	[PC <-- PC + imm26]		                |   111011111001100 -- ADD with unsigned
--------------------------------------------------------------------
jal [R31 <-- PC + 4; PC <-- PC + imm26]     |	111011111001111 	    -- ADD 
---------------------------------------------------------------------
beqz [if (R[rega] == 0) PC <-- PC + imm16]	|	111011111000100     -- ADD
---------------------------------------------------------------------
bnez [if (R[rega] != 0) PC <-- PC + imm16]  |   111011110000100             --ADD
--------------------------------------------------------------------- 
bfpt [if (fps == 1) PC <-- PC + imm16]                                 
---------------------------------------------------------------------
bfpf [if (fps == 0) PC <-- PC + imm16]
---------------------------------------------------------------------
addi [R[regb] <-- R[rega] + imm16]          |   111011110000111             --ADD
---------------------------------------------------------------------
addui [R[regb] <-- R[rega] + uimm16]        |	111011110000111             --ADD
---------------------------------------------------------------------
subi [R[regb] <-- R[rega] - imm16]          |   111011110000111             --SUB
---------------------------------------------------------------------
subui [R[regb] <-- R[rega] - uimm16]        |   111011110000111             --SUB
---------------------------------------------------------------------
andi  [R[regb] <-- R[rega] & uimm16]		|   111011110000111         --AND
---------------------------------------------------------------------
ori   [R[regb] <-- R[rega] | uimm16]	    |	111011110000111             --OR
---------------------------------------------------------------------
xori  [R[regb] <-- R[rega] XOR uimm16]      |   111011110000111             --XOR
---------------------------------------------------------------------
lhi   [R[regb] <-- imm16 ## 0^16]                                          --SHIFT
---------------------------------------------------------------------
rfe [Unspecified Return from exception]
---------------------------------------------------------------------
trap []
---------------------------------------------------------------------
jr []                                                                     -- ADD 0 or BYPASS
---------------------------------------------------------------------
jalr []                                                                   -- ADD 0 or BYPASS
---------------------------------------------------------------------
slli [R[regb] <-- R[rega] << uimm16_27..31] |   111011110000111           --SHIFT
---------------------------------------------------------------------
srli [R[regb] <-- R[rega] >> uimm16_27..31] |   111011110000111           --SHIFT
---------------------------------------------------------------------
srai []                                                                   --ARITH SHIFT imm
---------------------------------------------------------------------
seqi []                                                                   --COMP (eq)
-------------------------------------------------------------------------------------       
snei []                                                                   --COMP (diff)
-------------------------------------------------------------------------------------
slti []									  --COMP (Less than)
---------------------------------------------------------------------
sgti 									  --COMP (GREATER than)
------------------------------------------------------------------------------------
slei [if (R[rega] <= imm16) R[regb] <-- 1 else R[regb] <-- 0]  | 111011110000111 (?) --COMP (Less eq)
------------------------------------------------------------------------------------
sgei [if (R[rega] >= imm16) R[regb] <-- 1 else R[regb] <-- 0]  | 111011110000111 (?) --COMP (great eq)
------------------------------------------------------------------------------------
lb 					       Requires a sign extension in MEM stage--ADD
---------------------------------------------------------------------
lh                                             Requires a sign extension in MEM stage--ADD
---------------------------------------------------------------------------------------
lw  [R[regb] <-- M[imm16 + R[rega]]]  |  111011110010101  (considering DRAM_WE as W/R') --ADD
---------------------------------------------------------------------------------------
lbu                                           Requires a sign extension in MEM stage (add zeros)--ADD
---------------------------------------------------------------------
lhu                                           Requires a sign extension in MEM stage (add zeros)--ADD
---------------------------------------------------------------------
sb 							--ADD (signed) need an extra control signal
---------------------------------------------------------------------
sh                                                      --ADD (signed) need an extra control signal
--------------------------------------------------------------------------------------
sw [M[imm16 + R[rega]] <-- R[regb]]  |  111011110110101  (considering DRAM_WE as W/R') --ADD (signed) need an extra control signal
---------------------------------------------------------------------
sltui                                                   --COMP unsgined
---------------------------------------------------------------------
sgtui                                                   --COMP unsgined
---------------------------------------------------------------------
sleui                                                   --COMP unsgined
---------------------------------------------------------------------
sgeui                                                   --COMP unsgined
---------------------------------------------------------------------
sll [R[regc] <-- R[rega] << R[regb]_27..31]  | 	111101010000111 --SHIFT LOGIC
---------------------------------------------------------------------
srl [R[regc] <-- R[rega] >> R[regb]_27..31]  | 	111101010000111 --SHIFT LOGIC
---------------------------------------------------------------------
sra                                                        --ARITH SHIFT
---------------------------------------------------------------------
add [R[regc]<-- R[rega] + R[regb]]			 |  111101010000111 -ADD
---------------------------------------------------------------------
addu        						   --ADD
---------------------------------------------------------------------
sub [R[regc] <-- R[rega] - R[regb]]	         |  111101010000111 --SUB
---------------------------------------------------------------------
subu 								--SUB
---------------------------------------------------------------------
and [R[regc] <-- R[rega] & R[regb]]			 |  111101010000111 --AND
---------------------------------------------------------------------
or [R[regc] <-- R[rega] | R[regb]]	         |  111101010000111 --OR
---------------------------------------------------------------------
xor [R[regc] <-- F[rega] XOR R[regb]]        |  111101010000111 --XOR
---------------------------------------------------------------------
seq 								--COMP
----------------------------------------------------------------------------------
sne [if (R[rega] != R[regb]) R[regc] <-- 1 else R[regc] <-- 0]  |  111101010000111 --COMP
----------------------------------------------------------------------------------
slt 								--COMP
---------------------------------------------------------------------
sgt 								--COMP
----------------------------------------------------------------------------------
sle [if (R[rega] <= R[regb]) R[regc] <-- 1 else R[regc] <-- 0]  |  111101010000111 --COMP
----------------------------------------------------------------------------------
sge [if (R[rega] >= R[regb]) R[regc] <-- 1 else R[regc] <-- 0]  |  111101010000111 --COMP

sltu 								--COMP
---------------------------------------------------------------------
sgtu 								--COMP
---------------------------------------------------------------------
sleu 								--COMP
---------------------------------------------------------------------
sgeu								--COMP
---------------------------------------------------------------------
mult 								--MULT
---------------------------------------------------------------------
multu 								--MULT unsigned
---------------------------------------------------------------------


